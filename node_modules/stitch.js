
(function (exports) {

var util = require('stitch/util'),
    Module = require('stitch/module').Module,
    stitch = {
        /**
         * @property sourcePaths
         * @type {array}
         */
        sourcePaths: [],
        
        /**
         * @property modules
         * @type {object}
         */
        modules: {},
        
        /**
         * @property filters
         * @type object
         */
        filters: {},
        
        /**
         * 
         * @method configure
         * @param fn {function} closure
         */
        configure: function (fn) {
            fn.call(this, this);
            return this;
        },
    
        set: function (key, value) {
        
        },
    
        get: function (key) {
        
        },
        
        description: function (txt) {
            if (this.currentDesc === undefined) {
                this.currentDesc = txt;
            }
            else {
                this.currentDesc += "\n" + txt
            }
            return this;
        },
    
        compose: function (name) {
            var mod = this.modules[name];
            return mod.compose();
        },
        
        render: function (name, type) {
            return this.compose(name).render(type);
        },
        
        module: function (name, fn) {
            var mod,
                desc
            ;
            
            if (!fn) {
                return this.getModule(name);
            }
            
            desc = this.currentDesc;
            mod = this.currentModule = this.modules[name] ||
                (this.modules[name] = new Module(name, desc));
            
            fn.call(mod, mod);

            delete this.currentDesc;
            delete this.currentModule;
            
            return this;
        },
    
        filter: function (type, name, fn) {
            
            return this;
        },

        getModule: function (name) {
            var mod = this.modules[name];
            
            if (!mod) {
                throw("Unknown Module '" + name + "'");
            }
            
            return mod;
        },
    
        getFilter: function (name) {
            name = this.mimeTypes.hasOwnProperty(name) ?
                this.mimeTypes[name] :
                name
            ;
        
            return this.filters[name];
        },
    
        mimeTypes: {
            'text/javascript':  'js',
            'text/stylesheet':  'css',
            'text/html':        'html',
            'text/plain':       'text',
            'application/json': 'json'
        },
        
        util: util
    }
;

// aliases
stitch.desc = stitch.description;

// export
util.merge(exports, stitch);
    
}(exports || window));

